# class Person :
    
#     def __init__(self, name, gender, age) :
#         self.name = name
#         self.gender = gender
#         self.age = age
        
#     def talk(self) :
#         print("Hi I'm ", self.name)
        
#     def vote(self) :
#         if self.age < 18:
#             print("I m not eligible to vote")
#         else:
#             print("I m eligible to vote")
            
#     @classmethod
#     def 
            
# obj1 = Person("Sam", "Male", 22)
# obj2 = Person("Nancy", "Female", 17)
# obj1.talk()
# obj1.vote()

# obj2.talk()
# obj2.vote()

class Employee:
    
    raise_amt = 1.04
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        # self.email = first + "." + last + "@company.com"
        # suppose i want to change the first name then email will not get updated that's why we are going to create a decorator(by declaring it as property) for email so that it got updated when doing any changes in firt or last name and 
    
    @property
    def email(self):
        return '{}.{}@email.com'.format(self.first, self.last)
    
    @property
    def fullName(self):
        print('{} {}'.format(self.first, self.last))
        
        # we are going to create a setter method for fullName also because if we want to update the fullName then in that case the first and last name won't get updated
        
    @fullName.setter
    def fullName(self, name):
        first, last = name.split(' ')
        self.first = first
        self.last = last
        

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)
        print(self.pay)
        
    @classmethod
    def amt_raise(cls, amt):
        cls.raise_amt = 1.05
        
    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        else:
            return True
            
    def __repr__(self):
        return "Employee('{}', '{}', {})".format(self.first, self.last, self.pay)
        
    def __str__(self):
        return "{} - {}".format(self.fullName(), self.email)

emp_1 = Employee('Vishu', 'Tyagi', 50000)
emp_2 = Employee('Naman', 'Singh', 60000)

# print(emp_1.email)
# print(emp_2.email)

# emp_1.apply_raise()
# emp_1.amt_raise(1.05)
# emp_1.apply_raise()

# import datetime
# date = datetime.date(2016, 7,11)
# print(emp_1.is_workday(date))


class Developer(Employee):
    raise_amt = 1.10
    
    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first,last,pay)
        self.prog_lang = prog_lang
        
class Manager(Employee):
    
    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees == None:
            employees = []
        else:
            self.employees = employees
            
    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)
            
    def remove_emp(self,emp):
        if emp in self.employees:
            self.employees.remove(emp)
         
    def print_emp(self):
        for i in self.employees:
            print('--> ', i.email)


# dev1 = Developer('Vishu', 'Tyagi', 50000, 'Pyhton')
# dev2 = Developer('Naman', 'Singh', 60000, 'Java')


# print(dev1.email)
# print(dev2.email)

# mgr_1 = Manager('Swayam', 'Bhardwaj', 40000, [dev1])
# mgr_1.add_emp(dev2)
# mgr_1.remove_emp(dev1)
# mgr_1.print_emp()

# print(isinstance(mgr_1, Manager))

# print(emp_1.email)
# emp_1.first = 'Sawan'
# print(emp_1.first)
# print(emp_1.email)

print(emp_1.fullName)
emp_1.fullName = 'Himanshu Tyagi'
print(emp_1.first)
print(emp_1.last)



Inheritance -->



class Vehicle:
    capacity = 0
    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage
        
    def print_vehicles(self):
        print('Vehicle Name : {}, Max_Speed {}, Mileage : {}kms Mileage'.format(self.name, self.max_speed, self.mileage))
        
    def fare(self):
        return self.capacity * 100;
        
class Bus(Vehicle):
    def __init__(self, name, max_speed, mileage):
        super().__init__(name, max_speed, mileage)
        
    def seating_capacity(self, capacity):
        self.capacity = capacity
        print('The Seating Capacity of {} is of {} Passengers'.format(self.name, capacity))
        
        
# vehicle = Vehicle()   
obj = Bus('Volvo', 400, 22)
obj.print_vehicles()
obj.seating_capacity(50)

print(obj.fare())

        